	0	DSP		4			;	var 0 = limit, var 1 = count, var 2 = i, var 3 = ch		
	2	LDC		256
	4	STL_0				;	limit = 256
	5	LDA_1
	6	LDL_0				; 	could just LDC 256 instead of LDA  & LDV, but this is probs better practice
	7	ANEW				;	int[] count = new int[limit]
	8	STO
	9	LDC_0
	10	STL_2				;	int i = 0
	11	LDL_2				;	while (i<limit)		{B}
	12	LDL_0
	13	CLT					;	i<limit?	(pushes 1 or 0)					
	14	BZE		27			;	if i>=limit, skip past loop.	{A}	
	16	LDL_1
	17	LDL_2
	18	LDXA				;	count[i]
	19	LDC_0
	20	STO					;	count[i] = 0		
	21	LDL_2
	22	INC	
	23	NOP					
	24	STL_2				;	i++			
	25	BRN		11			;	{B}
	27	LDA_3				;	{A}
	28	INPI				;	read(ch)
	29	LDL_3				;	while (ch != '.')	{D}
	30	LDC		46			;	'.'
	32	CNE					;	ch != '.' ?
	33	BZE		49			;	{C}
	35	LDL_1				
	36	LDL_3
	37	CAP
	38	LDXA				;	address of count[ch]
	39	LDL_1
	40	LDL_3
	41	LDXA
	42	LDV
	43	INC
	44	STO					;	count[toUpperCase(ch)]++	{INC}
	45	LDA_3
	46	INPI				;	read(ch)
	47	BRN		29			;	{D}				
	49	LDC		90			;	ch = 'Z' {C}
	51	STL_3				;	i = 0
	52	LDL_3				;	while (ch >= 'A')	{G}
	53	LDC		65			
	55	CGE					;	ch >=  'A' ?	(pushes 1 or 0)
	56	BZE		81			;	Branch if ch < 'A' {E}			
	58	LDL_1
	59	LDL_3
	60	LDXA				;	address of count[ch]			
	61	LDV					;	value of count[ch]	(dereferencing)
	62	LDC_0
	63	CGT					;	count[ch] > 0?   (pushes 1 if count[ch] > 0 and branches if count[ch] <= 0) 
	64	BZE		76			;	if(count[ch] > 0) {F}
	66	LDL_1
	67	LDL_3
	68	LDXA				;	address of count[ch]
	69	LDV					;	value of count[ch]
	70	LDL_3				;	ch
	71	PRNC				;	print ch
	72	PRNS	" "			; 	print " "
	74	PRNC				;	print count[ch]
	75	PRNL				;	write(ch, count[ch], "\n")		
	76	LDL_3				;	{F}
	77	DEC				
	78	STL_2				;	ch-- 
	79	BRN		52			;	{G}
	81	HALT				;	{E}	